{"version":3,"file":"index.es.js","sources":["../src/models/nonces.js","../src/routes/nonces.js","../src/models/users.js","../src/routes/users.js","../src/db.js","../src/index.js"],"sourcesContent":["import mongoose from \"mongoose\";\nvar Schema = mongoose.Schema;\n\nvar nonceSchema = new Schema(\n  {\n    nonce: { type: Number },\n    walletAddress: { type: String },\n  },\n  {\n    timestamps: true,\n    versionKey: false,\n    toJSON: {\n      transform: function (doc, ret) {\n        const { _id, createdAt, updatedAt, ...obj } = ret;\n        return obj;\n      },\n    },\n  }\n);\n\nexport default mongoose.model(\"Nonce\", nonceSchema, \"nonces\");\n","import express from \"express\";\nimport { body, validationResult } from \"express-validator\";\nimport NonceModel from \"../models/nonces.js\";\nconst router = express.Router();\n\nconst generateNonce = () => Math.floor(Math.random() * 1000000);\n\n// Add new Nonce\nrouter.post(\n  \"/\",\n  body([\"walletAddress\"]).not().isEmpty(),\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty())\n      return res.status(400).json({ errors: errors.array() });\n\n    // Fetch the nonce from the DB (in case already exists)\n    // and update the nonce\n    const nonce = await NonceModel.findOneAndUpdate(\n      { walletAddress: req.body.walletAddress },\n      { nonce: generateNonce() },\n      { new: true }\n    );\n    if (nonce) return res.status(200).send(nonce);\n\n    try {\n      const nonce = await new NonceModel({\n        walletAddress: req.body.walletAddress,\n        nonce: generateNonce(),\n      }).save();\n\n      return res.status(201).send(nonce);\n    } catch (err) {\n      console.log(err);\n      return res\n        .status(400)\n        .send({ message: \"There was an error saving data\" });\n    }\n  }\n);\n\nexport { router };\n","import mongoose from \"mongoose\";\nvar Schema = mongoose.Schema;\n\nvar userSchema = new Schema(\n  {\n    walletAddress: { type: String, required: \"{PATH} is required!\" },\n  },\n  {\n    timestamps: true,\n    versionKey: false,\n    toJSON: {\n      transform: function (doc, ret) {\n        const { _id, createdAt, updatedAt, ...obj } = ret;\n        return obj;\n      },\n    },\n  }\n);\n\nexport default mongoose.model(\"User\", userSchema, \"users\");\n","import express from \"express\";\nimport { body, validationResult } from \"express-validator\";\nimport nacl from \"tweetnacl\";\nimport naclUtil from \"tweetnacl-util\";\nimport bs58 from \"bs58\";\nimport jwt from \"jsonwebtoken\";\nimport UserModel from \"../models/users.js\";\nimport NonceModel from \"../models/nonces.js\";\n\nconst router = express.Router();\n\nconst generateToken = (user) => {\n  return jwt.sign({ id: user._id }, global.config.jwt_secret, {\n    expiresIn: \"15d\", // expires in 15 days\n  });\n};\n\n// Add new User\nrouter.post(\n  \"/\",\n  body([\"message\", \"signedMessage\"]).not().isEmpty(),\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty())\n      return res.status(400).json({ errors: errors.array() });\n\n    const walletAddress = (/Wallet address: ([a-zA-Z0-9]*)/.exec(\n      req.body.message\n    ) ?? Array(1))[1];\n    const nonce_str = (/Nonce: ([0-9]*)/.exec(req.body.message) ?? Array(1))[1];\n\n    if (!walletAddress)\n      return res.status(400).send({ message: \"Wallet address is missing\" });\n    if (!nonce_str)\n      return res.status(400).send({ message: \"Nonce is missing\" });\n\n    const nonce = await NonceModel.findOne({\n      walletAddress,\n      nonce: nonce_str,\n    });\n    if (!nonce) return res.status(400).send({ message: \"Can't verify nonce\" });\n\n    try {\n      var verified = nacl.sign.detached.verify(\n        naclUtil.decodeUTF8(req.body.message),\n        Uint8Array.from(req.body.signedMessage),\n        bs58.decode(walletAddress)\n      );\n    } catch (err) {\n      return res.status(400).send({ message: err.message });\n    }\n\n    if (!verified)\n      return res\n        .status(400)\n        .send({ message: \"Can't verify signature and message\" });\n\n    // We delete the Nonce in the DB because it no longer makes sense to store it\n    await NonceModel.deleteOne({\n      walletAddress,\n      nonce: nonce_str,\n    });\n\n    // Fetch the user from the DB (in case it already exists)\n    const user = await UserModel.findOne({\n      walletAddress: walletAddress,\n    });\n    if (user) return res.status(200).send({ token: generateToken(user) });\n\n    try {\n      // Create and save the new user\n      const user = await new UserModel({\n        walletAddress: walletAddress,\n      }).save();\n\n      // TODO\n      // await fetchAndSaveWalletNfts(user);\n\n      return res.status(201).send({ token: generateToken(user) });\n    } catch (err) {\n      return res\n        .status(400)\n        .send({ message: \"There was an error saving data\" });\n    }\n  }\n);\n\nexport { router };","import mongoose from \"mongoose\";\n\nlet connectionString = global.config?.db_protocol;\nif (global.config?.db_user && global.config?.db_pass) {\n  connectionString += `${global.config.db_user}:${global.config.db_pass}@`;\n}\nconnectionString += `${global.config?.db_host}/${global.config?.db_name}?retryWrites=true&w=majority`;\n\n// DB Connection\nconst connectDb = async () => {\n  return new Promise((resolve, reject) => {\n    mongoose.connect(\n      connectionString,\n      { useNewUrlParser: true, useUnifiedTopology: true },\n      function (err, res) {\n        if (err) {\n          console.log(\"Couldn't connect to database\", err.code, err.input);\n          reject(err);\n        } else {\n          resolve(res.connections[0]);\n        }\n      }\n    );\n  });\n};\n\nexport { connectDb };\n","import express from \"express\";\nimport { router as noncesRouter } from \"./routes/nonces.js\";\nimport { router as usersRouter } from \"./routes/users.js\";\n\nimport { connectDb } from \"./db.js\";\nconnectDb();\n\nconst router = express.Router();\n\nrouter.use('/nonces', noncesRouter);\nrouter.use('/users', usersRouter);\n\nexport { router };\n"],"names":["Schema","mongoose","nonceSchema","nonce","type","Number","walletAddress","String","timestamps","versionKey","toJSON","transform","doc","ret","_id","createdAt","updatedAt","obj","_excluded","model","router","express","Router","generateNonce","Math","floor","random","post","body","not","isEmpty","req","res","errors","validationResult","status","json","array","NonceModel","findOneAndUpdate","send","save","console","log","message","userSchema","required","generateToken","user","jwt","sign","id","global","config","jwt_secret","expiresIn","exec","Array","nonce_str","findOne","verified","nacl","detached","verify","naclUtil","decodeUTF8","Uint8Array","from","signedMessage","bs58","decode","deleteOne","UserModel","token","connectionString","db_protocol","db_user","db_pass","db_host","db_name","connectDb","Promise","resolve","reject","connect","useNewUrlParser","useUnifiedTopology","err","code","input","connections","use","noncesRouter","usersRouter"],"mappings":"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"}